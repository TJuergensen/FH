package stack.ListStack;

import java.util.LinkedList;
import java.util.List;

import stack.AbstractStack;
import stack.StackError;

public class ListStack<E> extends AbstractStack<E> {

    private Cell<E> top;

    public ListStack() {
	super();
	top = null;
    }

    @Override
    public boolean isEmpty() {
	return top == null;
    }

    @Override
    public void push(E e) {
	Cell<E> newTop = new Cell<E>(e);
	newTop.setNext(top);
	top = newTop;
    }

    @Override
    public void pop() {
	if (isEmpty()) {
	    throw new StackError("Not possible. Stack is empty already");
	} else if (top.getNext() == null) {
	    top = null;
	} else {
	    top = top.getNext();
	}
    }

    @Override
    public E top() {
	if (isEmpty()) {
	    throw new StackError("Not possible. Stack is empty");
	} else {
	    return top.getData();
	}
    }

//    @Override
//    public List<E> toList() {
//	List<E> retList = new LinkedList<E>();
//	ListStack<E> tempStack = new ListStack<E>();
//	while(!isEmpty())
//	{
//	    retList.add(top());
//	    tempStack.push(top());
//	    pop();
//	}
//	
//	while(!tempStack.isEmpty())
//	{
//	    push(tempStack.top());
//	    tempStack.poptop();
//	}
//	return retList;
//    }
    
}
