package stack;
import java.util.List;

import stack.ListStack.Stack;

public abstract class AbstractStack<E> implements Stack<E> {

    public E poptop() {
	if (isEmpty()) {
	    throw new StackError("Cannot do. Stack is empty");
	} else {
	    pop();
	    return top();
	}
    }
    
    public boolean isEqualTo(Stack<E> s)
    {
	boolean ret = false;
	if(isEmpty() != s.isEmpty()) return false;
	if(isEmpty() && s.isEmpty()) return true;
	
	List<E> otherStackAsList = s.toList();
	int i = 0;
	while(!isEmpty())
	{
	    if(otherStackAsList.get(i) != null && top() == otherStackAsList.get(i))
	    {
		pop();
		i++;
	    } else {
		while(!isEmpty())
		{
		    pop();
		}
	    }
	}
	
	//Refill the stack & return true
	for(int j=0; i<otherStackAsList.size(); j++)
	{
	    push(otherStackAsList.get(i));
	}
	return true;
    }
}
