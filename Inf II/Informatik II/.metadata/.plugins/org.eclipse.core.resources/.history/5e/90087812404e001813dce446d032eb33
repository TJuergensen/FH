package stack.ListStack;

import stack.AbstractStack;
import stack.StackError;

public class ListStack<E> extends AbstractStack<E> {

    private Cell<E> top;

    public ListStack() {
	super();
	top = null;
    }

    @Override
    public boolean isEmpty() {
	return top == null;
    }

    @Override
    public void push(E e) {
	Cell<E> newTop = new Cell<E>(e);
	newTop.setNext(top);
	top = newTop;
    }

    @Override
    public void pop() {
	if (isEmpty()) {
	    throw new StackError("Not possible. Stack is empty already");
	} else if (top.getNext() == null) {
	    top = null;
	} else {
	    top = top.getNext();
	}
    }

    @Override
    public E top() {
	if (isEmpty()) {
	    throw new StackError("Not possible. Stack is empty");
	} else {
	    return top.getData();
	}
    }
}
